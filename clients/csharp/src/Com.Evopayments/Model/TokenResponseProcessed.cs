/*
 * EVO Payments
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.2.3
 * 
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using OpenAPIDateConverter = Com.Evopayments.Client.OpenAPIDateConverter;

namespace Com.Evopayments.Model
{
    /// <summary>
    /// TokenResponseProcessed
    /// </summary>
    [DataContract]
    public partial class TokenResponseProcessed : BaseResponse,  IEquatable<TokenResponseProcessed>, IValidatableObject
    {
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenResponseProcessed" /> class.
        /// </summary>
        [JsonConstructorAttribute]
        protected TokenResponseProcessed() { }
        /// <summary>
        /// Initializes a new instance of the <see cref="TokenResponseProcessed" /> class.
        /// </summary>
        /// <param name="merchantId">merchantId.</param>
        /// <param name="token">token.</param>
        /// <param name="resultId">resultId.</param>
        /// <param name="processingTime">processingTime.</param>
        public TokenResponseProcessed(string merchantId = default(string), string token = default(string), string resultId = default(string), int processingTime = default(int), string result = "TokenResponseProcessed") : base(result)
        {
            this.MerchantId = merchantId;
            this.Token = token;
            this.ResultId = resultId;
            this.ProcessingTime = processingTime;
        }

        /// <summary>
        /// Gets or Sets MerchantId
        /// </summary>
        [DataMember(Name="merchantId", EmitDefaultValue=false)]
        public string MerchantId { get; set; }

        /// <summary>
        /// Gets or Sets Token
        /// </summary>
        [DataMember(Name="token", EmitDefaultValue=false)]
        public string Token { get; set; }

        /// <summary>
        /// Gets or Sets ResultId
        /// </summary>
        [DataMember(Name="resultId", EmitDefaultValue=false)]
        public string ResultId { get; set; }

        /// <summary>
        /// Gets or Sets ProcessingTime
        /// </summary>
        [DataMember(Name="processingTime", EmitDefaultValue=false)]
        public int ProcessingTime { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class TokenResponseProcessed {\n");
            sb.Append("  ").Append(base.ToString().Replace("\n", "\n  ")).Append("\n");
            sb.Append("  MerchantId: ").Append(MerchantId).Append("\n");
            sb.Append("  Token: ").Append(Token).Append("\n");
            sb.Append("  ResultId: ").Append(ResultId).Append("\n");
            sb.Append("  ProcessingTime: ").Append(ProcessingTime).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return Newtonsoft.Json.JsonConvert.SerializeObject(this, Newtonsoft.Json.Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as TokenResponseProcessed);
        }

        /// <summary>
        /// Returns true if TokenResponseProcessed instances are equal
        /// </summary>
        /// <param name="input">Instance of TokenResponseProcessed to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(TokenResponseProcessed input)
        {
            if (input == null)
                return false;

            return base.Equals(input) && 
                (
                    this.MerchantId == input.MerchantId ||
                    (this.MerchantId != null &&
                    this.MerchantId.Equals(input.MerchantId))
                ) && base.Equals(input) && 
                (
                    this.Token == input.Token ||
                    (this.Token != null &&
                    this.Token.Equals(input.Token))
                ) && base.Equals(input) && 
                (
                    this.ResultId == input.ResultId ||
                    (this.ResultId != null &&
                    this.ResultId.Equals(input.ResultId))
                ) && base.Equals(input) && 
                (
                    this.ProcessingTime == input.ProcessingTime ||
                    (this.ProcessingTime != null &&
                    this.ProcessingTime.Equals(input.ProcessingTime))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = base.GetHashCode();
                if (this.MerchantId != null)
                    hashCode = hashCode * 59 + this.MerchantId.GetHashCode();
                if (this.Token != null)
                    hashCode = hashCode * 59 + this.Token.GetHashCode();
                if (this.ResultId != null)
                    hashCode = hashCode * 59 + this.ResultId.GetHashCode();
                if (this.ProcessingTime != null)
                    hashCode = hashCode * 59 + this.ProcessingTime.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }

}
